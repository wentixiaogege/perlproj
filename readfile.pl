#!/usr/bin/perl
use strict;
use warnings;

# use Tie::IxHash;
 
my $filename = 'dtmf.conf';
open(my $fh, '<:encoding(UTF-8)', $filename)
  or die "Could not open file '$filename' $!";

print "\n************************Please input your configuraion ! **************************\n";

my %file_hash =();
my @file_keys=();
# tie my %file_hash, "Tie::IxHash"
#     or die "could not tie %file_hash";
# %perl_hash2 = (%perl_hash2, programming, perl);
# %perl_hash2 = (%perl_hash2, "aa", "bb");

# put key and value to file_hash
my $index = 0;
while (my $row = <$fh>) {
    chomp $row;

    # print "$row\n";

    if($row =~ m/\((.+?)\)\s+?([\{|"].*?[\}|"])/){
        # print "$1 $2"."\n"
        %file_hash = (%file_hash, $1, $2);
        $file_keys[$index] = $1;
        $index++;
    }
}

# print "\n************************test hash table**************************\n";

# # $file_hash{"ui_netlist"} = '/home/encounter/logic/Verilog/DTMF.v'.'/home/encounter/logic/stubs.v';
# # test file_hash
# for my $k (keys %file_hash) {
#     print "$k $file_hash{$k}\n";
# }

# print "\n************************test hash table keys**************************\n";
# for(my $for_loop=0;$for_loop<$index;$for_loop++) {
#        print $for_loop . "----->" . @file_keys[$for_loop]."\n";
# } 

# getting user input

print "1. Please input  Verilog netlists [/home/encounter/logic/Verilog/DTMF.v /home/encounter/logic/stubs.v]:\n";
my $user_input = input_d('/home/encounter/logic/Verilog/DTMF.v /home/encounter/logic/stubs.v');
print 'change <ui_netlist> to '. $user_input . "\n\n";
# ui_netlist
$file_hash{"ui_netlist"} = '"' . $user_input. '"';


print "2. Please input  Fast corner timing library [/home/encounter/timing/fast/*fast*.lib]: \n";
$user_input = input_d('/home/encounter/timing/fast/*fast*.lib');
print 'change <ui_timelib,min> to '. $user_input . "\n\n";
$file_hash{"ui_timelib,min"} = '"' . $user_input. '"';


print "3. Please input  Slow corner timing library [/home/encounter/timing/slow/*slow*.lib]: \n";
# $user_input = <STDIN>;
# User needs to type in the following path:
# /home/encounter/timing/slow/*slow*.lib
# ui_timelib,max
$user_input = input_d('/home/encounter/timing/slow/*slow*.lib');
print 'change <ui_timelib,max> to '. $user_input . "\n\n";
$file_hash{"ui_timelib,max"} = '"' . $user_input. '"';

print "4. Please input  IO file [/home/encounter/TSMC90/DTMF/dtmf.io]: \n";
# User needs to type in the following path:
# /home/encounter/TSMC90/DTMF/dtmf.io
# ui_io_file
$user_input = input_d('/home/encounter/TSMC90/DTMF/dtmf.io');
print 'change <ui_io_file> to '. $user_input . "\n\n";
$file_hash{"ui_io_file"} = '"' . $user_input. '"';

print "5. Please input  dtmf constraint file [/home/encounter/TSMC90/DTMF/dtmf.sdc]: \n";
# $user_input = <STDIN>;
# User needs to type in the following path:
# /home/encounter/TSMC90/DTMF/dtmf.sdc
# ui_timingcon_file
$user_input = input_d('/home/encounter/TSMC90/DTMF/dtmf.sdc');
print 'change <ui_timingcon_file> to '. $user_input . "\n\n";
$file_hash{"ui_timingcon_file"} = '"' . $user_input. '"';

print "6. Please input  lef file [/home/encounter/TSMC90/physical/lef/all.lef /home/encounter/TSMC90/DTMF/physical/lef/mem.lef]: \n";
# User needs to type in the following 2 paths:
# /home/encounter/TSMC90/physical/lef/all.lef
# /home/encounter/TSMC90/DTMF/physical/lef/mem.lef
# ui_leffile
$user_input = input_d('/home/encounter/TSMC90/physical/lef/all.lef /home/encounter/TSMC90/DTMF/physical/lef/mem.lef');
print 'change <ui_leffile> to '. $user_input . "\n\n";
$file_hash{"ui_leffile"} = '"' . $user_input. '"';

print "7. Please input  Power names [VDD1 VDD2 VDD3]: \n";
# User needs to type in the following data:
# VDD1 VDD2 VDD3
# ui_pwrnet
$user_input = input_d('VDD1 VDD2 VDD3');
print 'change <ui_pwrnet> to '. $user_input . "\n\n";
$file_hash{"ui_pwrnet"} = '"' . $user_input. '"';

print "8. Please input  Ground name [GND]: \n";
# User needs to type in the following data:
# GND
# ui_pg_connections
$user_input = input_d('GND');
print 'change <ui_pg_connections> to '. $user_input . "\n\n";
$file_hash{"ui_pg_connections"} = '"' . $user_input. '"';

print "************************Your configuraion end! **************************\n";

# print "\n************************test hash table**************************\n";
# $file_hash{"ui_netlist"} = '/home/encounter/logic/Verilog/DTMF.v'.'/home/encounter/logic/stubs.v';
# test file_hash
# for my $k (keys %file_hash) {
#     print "$k $file_hash{$k}\n";
# }

# write file
my $out_filename = 'report.md';
open(my $fh2, '>', $out_filename) or die "Could not open file '$out_filename ' $!";

for(my $for_loop=0; $for_loop<$index; $for_loop++) {
    my $key = $file_keys[$for_loop];
    print $fh2 'set rda_Input(' . $key .') '. $file_hash{$key} . "\n";
} 

# print $fh2 "My first report generated by perl2\n";
close $fh2;
print "Please check the final file ".$out_filename."\n";

########## sub declarations come here
 
sub input_d {
    my ($text) = @_;
    # print $text;

    my $input = <STDIN>;
    chomp $input;
    if (!$input) {
       # body...
       $input = $text;
    }
    return $input;
}